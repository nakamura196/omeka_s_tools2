[
  {
    "objectID": "demo_lang.html",
    "href": "demo_lang.html",
    "title": "Demo for language tag",
    "section": "",
    "text": "omeka_auth = OmekaAPIClient(\n    # api_url='https://timsherratt.org/collections/api',\n    api_url=os.getenv('API_URL'),\n    key_identity=os.getenv('KEY_IDENTITY'), \n    key_credential=os.getenv('KEY_CREDENTIAL'),\n    use_cache=False\n)\n\n\ntest_item = {\n    'schema:name': [\n        {\n            'value': 'My first resource!',\n            \"lang\": \"ja\"\n        }\n    ]\n}\n\n\npayload = omeka_auth.prepare_item_payload(test_item)\npayload\n\n{'schema:name': [{'property_id': 2922,\n   'type': 'literal',\n   '@value': 'My first resource!',\n   '@language': 'ja'}]}\n\n\n\nnew_item = omeka_auth.add_item(payload)\nnew_item\n\n{'@context': 'https://omekas.aws.ldas.jp/sandbox/api-context',\n '@id': 'https://omekas.aws.ldas.jp/sandbox/api/items/8024',\n '@type': 'o:Item',\n 'o:id': 8024,\n 'o:is_public': True,\n 'o:owner': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/users/1',\n  'o:id': 1},\n 'o:resource_class': None,\n 'o:resource_template': None,\n 'o:thumbnail': None,\n 'o:title': None,\n 'thumbnail_display_urls': {'large': None, 'medium': None, 'square': None},\n 'o:created': {'@value': '2022-11-15T04:06:06+00:00',\n  '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n 'o:modified': {'@value': '2022-11-15T04:06:06+00:00',\n  '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n 'o:media': [],\n 'o:item_set': [],\n 'o:site': [{'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/1',\n   'o:id': 1},\n  {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/2', 'o:id': 2}],\n 'schema:name': [{'type': 'literal',\n   'property_id': 2922,\n   'property_label': 'name',\n   'is_public': True,\n   '@value': 'My first resource!',\n   '@language': 'ja'}]}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Omeka S Tools 2",
    "section": "",
    "text": "This repository is based on Omeka S Tools by Tim Sherratt."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "Omeka S Tools 2",
    "section": "Install",
    "text": "Install\npip install omeka-s-tools2"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Omeka S Tools 2",
    "section": "How to use",
    "text": "How to use\nSee the documentation for full details of the Omeka API Client.\n\nfrom omeka_s_tools2.api import *\n\nomeka = OmekaAPIClient('http://timsherratt.org/collections/api')\n\n\nitems = omeka.get_resources('items')\nitems['total_results']\n\n140\n\n\n\nitems['results'][0]\n\n{'@context': 'http://timsherratt.org/collections/api-context',\n '@id': 'http://timsherratt.org/collections/api/items/677',\n '@type': ['o:Item', 'schema:Newspaper'],\n 'o:id': 677,\n 'o:is_public': True,\n 'o:owner': {'@id': 'http://timsherratt.org/collections/api/users/1',\n  'o:id': 1},\n 'o:resource_class': {'@id': 'http://timsherratt.org/collections/api/resource_classes/161',\n  'o:id': 161},\n 'o:resource_template': {'@id': 'http://timsherratt.org/collections/api/resource_templates/5',\n  'o:id': 5},\n 'o:thumbnail': None,\n 'o:title': 'Manilla Express (NSW : 1899 - 1954)',\n 'thumbnail_display_urls': {'large': 'http://timsherratt.org/collections/files/large/aa1fb4063116fc889418ce6dc20af3cb7e7bd0db.jpg',\n  'medium': 'http://timsherratt.org/collections/files/medium/aa1fb4063116fc889418ce6dc20af3cb7e7bd0db.jpg',\n  'square': 'http://timsherratt.org/collections/files/square/aa1fb4063116fc889418ce6dc20af3cb7e7bd0db.jpg'},\n 'o:created': {'@value': '2022-01-20T06:37:50+00:00',\n  '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n 'o:modified': {'@value': '2022-01-20T06:37:50+00:00',\n  '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n 'o:media': [{'@id': 'http://timsherratt.org/collections/api/media/882',\n   'o:id': 882},\n  {'@id': 'http://timsherratt.org/collections/api/media/897', 'o:id': 897},\n  {'@id': 'http://timsherratt.org/collections/api/media/929', 'o:id': 929},\n  {'@id': 'http://timsherratt.org/collections/api/media/994', 'o:id': 994},\n  {'@id': 'http://timsherratt.org/collections/api/media/995', 'o:id': 995},\n  {'@id': 'http://timsherratt.org/collections/api/media/996', 'o:id': 996},\n  {'@id': 'http://timsherratt.org/collections/api/media/997', 'o:id': 997}],\n 'o:item_set': [],\n 'o:site': [],\n 'schema:name': [{'type': 'literal',\n   'property_id': 1116,\n   'property_label': 'name',\n   'is_public': True,\n   '@value': 'Manilla Express (NSW : 1899 - 1954)'}],\n 'schema:url': [{'type': 'uri',\n   'property_id': 393,\n   'property_label': 'url',\n   'is_public': True,\n   '@id': 'http://nla.gov.au/nla.news-title1006'}],\n 'schema:identifier': [{'type': 'literal',\n   'property_id': 190,\n   'property_label': 'identifier',\n   'is_public': True,\n   '@value': '1006'}],\n '@reverse': []}\n\n\nSee the documentation for more examples.\n\nCreated by Tim Sherratt (@wragge) for the GLAM Workbench.\nCreated by @satoru196."
  },
  {
    "objectID": "api.html",
    "href": "api.html",
    "title": "Omeka S API client",
    "section": "",
    "text": "source"
  },
  {
    "objectID": "api.html#getting-resources",
    "href": "api.html#getting-resources",
    "title": "Omeka S API client",
    "section": "Getting resources",
    "text": "Getting resources\nYou can find a full list of Omeka’s resources in the API documentation. You’re most likely to be interested in ‘items’, but accessing ‘properties’ and ‘resource_templates’ can be useful when you’re creating new resources.\nYou should be able to use get_resources with any of the resource types, though some of the parameters will be different.\n\nsource\n\nOmekaAPIClient.get_resources\n\n OmekaAPIClient.get_resources (resource_type, **kwargs)\n\nGet a list of resources matching the supplied parameters.\nThis will return the first page of matching results. To retrieve additional pages, you can supply the page parameter to move through the full result set.\nParameters:\n* resource_type - one of Omeka’s resource types, eg: ‘items’, ‘properties’\n* there are many additional parameters you can supply as kwargs, see the Omeka documention\nReturns a dict with the following values:\n* total_results - number of matching resources\n* results - a list of dicts, each containing a JSON-LD formatted representation of a resource\n\ndata = omeka.get_resources('items')\ndata['total_results']\n\n7109\n\n\n\nassert isinstance(data['total_results'], int)\n\n\n# Get a list of available resource templates\ndata = omeka.get_resources('resource_templates')\nfirst_template = data['results'][0]\nassert first_template['@type'] == 'o:ResourceTemplate'\n\n\nsource\n\n\nOmekaAPIClient.get_resource_by_id\n\n OmekaAPIClient.get_resource_by_id (resource_id, resource_type='items')\n\nGet a resource from its Omeka id.\nParameters:\n* resource_id - numeric identifier used by Omeka for this resource\n* resource_type - one of Omeka’s resource types, eg: ‘items’, ‘properties’\nReturns\n* a dict containing a JSON-LD formatted representation of the resource\n\n# Get a random item from a list of items\ndata = omeka.get_resources('items')\nrandom_item = random.choice(data['results'])\nitem_id = random_item['o:id']\n\n# Get the same item using its id\nitem_from_id = omeka.get_resource_by_id(item_id, 'items')\n\n# Check that they're the same\nassert random_item == item_from_id\n\nIt can be difficult to remember all the available parameters and the differences between resource types, so I’ve created a number of more specialised methods that are really just wrappers around get_resources.\n\nsource\n\n\nOmekaAPIClient.get_template_by_label\n\n OmekaAPIClient.get_template_by_label (label)\n\nGet a resource template from its Omeka label.\nParameters:\n* label - the name of the resource template in Omeka (eg. ‘NewspaperArticle’)\nReturns:\n* dict containing representation of the template\n\nnewspaper_template = omeka.get_template_by_label('Newspaper')\n\nassert newspaper_template['@type'] == 'o:ResourceTemplate'\nassert newspaper_template['o:label'] == 'Newspaper'\n\n\n# Get a random template from list\ntemplate_from_list = random.choice(omeka.get_resources('resource_templates')['results'])\nlabel = template_from_list['o:label']\n\n# Get the template using label\ntemplate_from_label = omeka.get_template_by_label(label)\n\n# Check they're both the same\nassert template_from_list == template_from_label\n\n\nsource\n\n\nOmekaAPIClient.get_resource_by_term\n\n OmekaAPIClient.get_resource_by_term (term, resource_type='properties')\n\nGet the resource (property or class) associated with the suppied term.\nParameters:\n* term - property label qualified with vocabulary prefix (eg: ‘schema:name’)\nReturns:\n* dict containing representation of the resource\n\nprop = omeka.get_resource_by_term('schema:name')\nprop\n\n{'@context': 'https://omekas.aws.ldas.jp/sandbox/api-context',\n '@id': 'https://omekas.aws.ldas.jp/sandbox/api/properties/2922',\n '@type': 'o:Property',\n 'o:id': 2922,\n 'o:local_name': 'name',\n 'o:label': 'name',\n 'o:comment': 'The name of the item.',\n 'o:term': 'schema:name',\n 'o:vocabulary': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/vocabularies/7',\n  'o:id': 7}}\n\n\n\nassert prop['@type'] == 'o:Property'\nassert prop['o:term'] == 'schema:name'\n\n\nsource\n\n\nOmekaAPIClient.get_resource_from_vocab\n\n OmekaAPIClient.get_resource_from_vocab (local_name,\n                                         vocabulary_namespace_uri='http://\n                                         schema.org/',\n                                         resource_type='properties')\n\nGet the resource (property or class) associated with the suppied vocabulary and label.\nParameters:\n* local_name - label of the property or class\n* vocabulary_namespace_uri - URI defining the vocab\nReturns:\n* dict containing representation of the resource\n\nprop = omeka.get_resource_from_vocab(\n    'name', \n    vocabulary_namespace_uri='http://schema.org/',\n    resource_type='properties')\nprop\n\n{'@context': 'https://omekas.aws.ldas.jp/sandbox/api-context',\n '@id': 'https://omekas.aws.ldas.jp/sandbox/api/properties/2922',\n '@type': 'o:Property',\n 'o:id': 2922,\n 'o:local_name': 'name',\n 'o:label': 'name',\n 'o:comment': 'The name of the item.',\n 'o:term': 'schema:name',\n 'o:vocabulary': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/vocabularies/7',\n  'o:id': 7}}\n\n\n\nvocab = requests.get(prop['o:vocabulary']['@id'])\nnamespace_uri = vocab.json()['o:namespace_uri']\n\nassert namespace_uri == 'http://schema.org/'\nassert prop['o:local_name'] == 'name'\n\n\nsource\n\n\nOmekaAPIClient.get_property_id\n\n OmekaAPIClient.get_property_id (term)\n\nGet the numeric identifier associated with the supplied property term.\nParameters:\n* term - property label qualified with vocabulary prefix (eg: ‘schema:name’)\nReturns:\n* numeric identifier\n\nprop_id = omeka.get_property_id('schema:name')\nprop_id\n\n2922\n\n\n\nassert isinstance(prop_id, int)\n\nprop = omeka.get_resource_by_id(prop_id, 'properties')\nassert prop['o:term'] == 'schema:name'\n\n\nsource\n\n\nOmekaAPIClient.filter_items_by_property\n\n OmekaAPIClient.filter_items_by_property (filter_property='schema:name',\n                                          filter_value='',\n                                          filter_type='eq', page=1,\n                                          **extra_filters)\n\nFilter the list of items by searching for a value in a particular property.\nAdditional filters can also limit to items associated with particular templates, classes, or item sets.\nParameters:\n* filter_property - property term (eg: ‘schema:name’)\n* filter_value - the value you want to find\n* filter_type - how filter_value should be compared to the stored values (eg: ‘eq’)\n* page - number of results page\nAdditional parameters:\n* resource_template_id - numeric identifier\n* resource_class_id - numeric identifier\n* item_set_id - numeric identifier\n* is_public - boolean, True or False\nReturns a dict with the following values:\n* total_results - number of matching resources\n* results - a list of dicts, each containing a JSON-LD formatted representation of a resource\n\nitems = omeka.filter_items_by_property(filter_property='schema:name', filter_value='My first resource!', filter_type='in')\n\nassert len(items['results']) > 0\nassert 'my first resource!' in items['results'][0]['schema:name'][0]['@value'].lower()\n\n\nitems['results'][0]['schema:name'][0]['@value']\n\n'My first resource!'\n\n\n\nsource\n\n\nOmekaAPIClient.search_items\n\n OmekaAPIClient.search_items (query, search_type='fulltext_search',\n                              page=1, **extra_filters)\n\nSearch for matching items.\nTwo search types are available:\n* ’search- looks for an exact match of the query in a property value   * 'fulltext_search - looks for the occurance of the query anywhere\nParameters:\n* query - the text you want to search for\n* search_type - one of ‘fulltext_search’ or ‘search’\n* page - number of results page\nAdditional parameters:\n* resource_template_id - numeric identifier\n* resource_class_id - numeric identifier\n* item_set_id - numeric identifier\n* is_public - boolean, True or False\nReturns a dict with the following values:\n* total_results - number of matching resources\n* results - a list of dicts, each containing a JSON-LD formatted representation of a resource\n\nitems = omeka.search_items('My first resource!')\nitems['total_results']\n\n14\n\n\n\nassert items['total_results'] >= len(items['results'])"
  },
  {
    "objectID": "api.html#adding-items",
    "href": "api.html#adding-items",
    "title": "Omeka S API client",
    "section": "Adding items",
    "text": "Adding items\nTo add resources to Omeka you need authenticate your API requests by supplying key_identity and key_credential tokens as parameters.\n\nomeka_auth = OmekaAPIClient(\n    # api_url='https://timsherratt.org/collections/api',\n    api_url=os.getenv('API_URL'),\n    key_identity=os.getenv('KEY_IDENTITY'), \n    key_credential=os.getenv('KEY_CREDENTIAL'),\n    # use_cache=False\n)\n\nThere are two stages in creating a new item:\n\nprepare a payload containing the item data in the format expected by Omeka\nupload the payload to Omeka\n\n\nPrepare an item payload\n\nsource\n\n\nOmekaAPIClient.prepare_item_payload\n\n OmekaAPIClient.prepare_item_payload (terms)\n\nPrepare an item payload, ready for upload.\nParameters:\n* terms: a dict of terms, values, and (optionally) data types\nReturns:\n* the payload dict\n\ntest_item = {\n    'schema:name': [\n        {\n            'value': 'My first resource!'\n        }\n    ]\n}\n\n\npayload = omeka_auth.prepare_item_payload(test_item)\npayload\n\n{'schema:name': [{'property_id': 2922,\n   'type': 'literal',\n   '@value': 'My first resource!'}]}\n\n\nEach term in the payload should have values for property_id and type, and the property value should be included as either @id or @value depending on the data type.\n\nfirst_property = list(payload.values())[0][0]\n\nassert 'property_id' in first_property\nassert 'type' in first_property\nassert '@value' in first_property or '@id' in first_property\n\nOne of the powerful features of Omeka S is the ability to create resource templates that define a set of properties for a particular type of item. We can use templates to help create our payload, ensuring that the terms and data types we supply match those expected by the template. This is useful for identifying potential problems before we upload to Omeka, especially as Omeka will sometimes just fail silently.\n\nsource\n\n\nOmekaAPIClient.prepare_item_payload_using_template\n\n OmekaAPIClient.prepare_item_payload_using_template (terms, template_id)\n\nPrepare an item payload, checking the supplied terms and values against the specified template.\nNote:\n* terms that are not in the template will generate a warning and be dropped from the payload\n* data types that don’t match the template definitions will generate a warning and the term will be dropped from the payload\n* if no data type is supplied, a type that conforms with the template definition will be used\nParameters:\n* terms: a dict of terms, values, and (optionally) data types\n* template_id: Omeka’s internal numeric identifier for the template\nReturns:\n* the payload dict\nOnce you’ve created a payload, you can add paths to any media files that you want to be attached to the item.\n\ntest_newspaper_item = {\n    'schema:name': [\n        {\n            'value': 'nakamura196!'\n        }\n    ]\n}\n\n\nnewspaper_template = omeka.get_template_by_label('Newspaper')\nnewspaper_template\n\n{'@context': 'https://omekas.aws.ldas.jp/sandbox/api-context',\n '@id': 'https://omekas.aws.ldas.jp/sandbox/api/resource_templates/2',\n '@type': 'o:ResourceTemplate',\n 'o:id': 2,\n 'o:label': 'Newspaper',\n 'o:owner': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/users/1',\n  'o:id': 1},\n 'o:resource_class': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/resource_classes/26',\n  'o:id': 26},\n 'o:title_property': None,\n 'o:description_property': None,\n 'o:resource_template_property': [{'o:property': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/properties/1',\n    'o:id': 1},\n   'o:alternate_label': None,\n   'o:alternate_comment': None,\n   'o:data_type': [],\n   'o:is_required': False,\n   'o:is_private': False},\n  {'o:property': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/properties/4',\n    'o:id': 4},\n   'o:alternate_label': None,\n   'o:alternate_comment': None,\n   'o:data_type': [],\n   'o:is_required': False,\n   'o:is_private': False},\n  {'o:property': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/properties/2922',\n    'o:id': 2922},\n   'o:alternate_label': None,\n   'o:alternate_comment': None,\n   'o:data_type': [],\n   'o:is_required': False,\n   'o:is_private': False}]}\n\n\n\ntest_newspaper_payload = omeka_auth.prepare_item_payload_using_template(test_newspaper_item, newspaper_template[\"o:id\"])\ntest_newspaper_payload\n\n{'schema:name': [{'property_id': 2922,\n   'type': 'literal',\n   '@value': 'nakamura196!'}]}\n\n\n\nassert test_newspaper_item['schema:name'][0]['value'] == test_newspaper_payload['schema:name'][0]['@value']\nassert test_newspaper_payload['schema:name'][0]['type'] == 'literal'\n\n\nsource\n\n\nOmekaAPIClient.add_iiif_to_payload\n\n OmekaAPIClient.add_iiif_to_payload (payload, iiif_urls)\n\nAdd iiif urls to the item payload.\nParameters:\n* payload - the payload dict to be modified\n* iiif_urls - iiif urls to be uploaded\nReturns:\n* the modified payload dict\n\npayload_with_iiif = omeka_auth.add_iiif_to_payload({}, iiif_urls=['https://www.dl.ndl.go.jp/api/iiif/3437686/R0000001/info.json'])\n\n\nassert json.loads(payload_with_iiif['data'][1])\n\n\nsource\n\n\nOmekaAPIClient.add_media_to_payload\n\n OmekaAPIClient.add_media_to_payload (payload, media_files)\n\nAdd media files to the item payload.\nParameters:\n* payload - the payload dict to be modified\n* media_files - media files to be uploaded\nThe value of media_files can be either:\n* a list of paths to the image/media files (filename is used as title)\n* a list of dicts, each containing title, and path values\nThe path values can either be strings or pathlib Paths.\nReturns: * the modified payload dict\n\npayload_with_media = omeka_auth.add_media_to_payload({}, media_files=['media/nla.news-article226799674-24144902.jpg'])\n\n\nassert json.loads(payload_with_media['data'][1])\n\n\n\nUpload the payload to Omeka and create a new item\n\nsource\n\n\nOmekaAPIClient.add_item\n\n OmekaAPIClient.add_item (payload, media_files=None, template_id=None,\n                          class_id=None, item_set_id=None)\n\nCreate a new item from the supplied payload, optionally uploading attached media files.\nParameters:\n* payload - a dict generated by prepare_item_payload() or prepare_item_payload_using_template()\n* media_files - a list of paths pointing to media files, or a list of dicts with path and title values\n* template_id - internal Omeka identifier of a resource template you want to attach to this item\n* class_id - internal Omeka identifier of a resource class you want to attach to this item\n* item_set_id - internal Omeka identifier for an item set you want to add this item to\nReturns:\n* a dict providing the JSON-LD representation of the new item from Omeka\n\n\nAdd a simple item\n\nnew_item = omeka_auth.add_item(payload)\nnew_item\n\n{'@context': 'https://omekas.aws.ldas.jp/sandbox/api-context',\n '@id': 'https://omekas.aws.ldas.jp/sandbox/api/items/8027',\n '@type': 'o:Item',\n 'o:id': 8027,\n 'o:is_public': True,\n 'o:owner': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/users/1',\n  'o:id': 1},\n 'o:resource_class': None,\n 'o:resource_template': None,\n 'o:thumbnail': None,\n 'o:title': None,\n 'thumbnail_display_urls': {'large': None, 'medium': None, 'square': None},\n 'o:created': {'@value': '2022-11-15T04:08:56+00:00',\n  '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n 'o:modified': {'@value': '2022-11-15T04:08:56+00:00',\n  '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n 'o:media': [],\n 'o:item_set': [],\n 'o:site': [{'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/1',\n   'o:id': 1},\n  {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/2', 'o:id': 2}],\n 'schema:name': [{'type': 'literal',\n   'property_id': 2922,\n   'property_label': 'name',\n   'is_public': True,\n   '@value': 'My first resource!'}]}\n\n\n\nassert new_item['@type'] == 'o:Item'\nassert test_item['schema:name'][0]['value'] == new_item['schema:name'][0]['@value']\n\nYou can also add an item to an existing item set by supplying the item_set_id parameter.\n\n# Get a random item set id\nrandom_item_set = random.choice(omeka_auth.get_resources('item_sets')['results'])\nitem_set_id = random_item_set['o:id']\n\n# Create a new item using the item set id\nnew_item_in_item_set = new_item = omeka_auth.add_item(payload, item_set_id=item_set_id)\n\n# Check that the ids match\nassert new_item_in_item_set['o:item_set'][0]['o:id'] == item_set_id"
  },
  {
    "objectID": "api.html#updating-resources",
    "href": "api.html#updating-resources",
    "title": "Omeka S API client",
    "section": "Updating resources",
    "text": "Updating resources\n\nsource\n\nOmekaAPIClient.delete_resource\n\n OmekaAPIClient.delete_resource (resource_id, resource_type)\n\nDeletes a resource. No confirmation is requested, so use carefully.\nParameters: * resource_id - local Omeka identifier of the resource you want to delete * resource_type - type of the resource (eg ‘items’)\nReturns: * dict with JSON-LD representation of the deleted resource\n\n# Get a random item from a list of items\ndata = omeka.get_resources('items')\nrandom_item = random.choice(data['results'])\n\ntry:\n\n    deleted_resource = omeka_auth.delete_resource(random_item['o:id'], 'items')\n\n    # The id of the deleted item should be None\n    assert deleted_resource['o:id'] is None\n\n    # The titles of the random and deleted items should be the same\n    assert deleted_resource['o:title'] == random_item['o:title']\n\n    # Trying to get the random item should now raise an HTTP 404 error\n    with pytest.raises(requests.exceptions.HTTPError):\n        omeka_auth.get_resource_by_id(random_item['o:id'], 'items')\n\nexcept Exception as e:\n    print(e)\n\n<Response [500]>\n500 Server Error: Internal Server Error for url: https://omekas.aws.ldas.jp/sandbox/api/items/917?key_identity=SizuLgHbsl5vHI95Eyko5jzK5W8fqns6&key_credential=f7Zfaaukc5j1WGkHw99i3bJCHR7ZK3rO\n\n\n\nsource\n\n\nOmekaAPIClient.update_resource\n\n OmekaAPIClient.update_resource (payload, resource_type='items')\n\nUpdate an existing resource.\nParameters: * payload - the updated resource data * resource_type - the type of resource\nTo avoid problems, it’s generally easiest to retrieve the resource first, make your desired changes to it, then submit the updated resource as your payload.\n\ndata = omeka_auth.filter_items_by_property(filter_property='schema:name', filter_type='ex')\ndata\n\n{'total_results': 5,\n 'results': [{'@context': 'https://omekas.aws.ldas.jp/sandbox/api-context',\n   '@id': 'https://omekas.aws.ldas.jp/sandbox/api/items/8024',\n   '@type': 'o:Item',\n   'o:id': 8024,\n   'o:is_public': True,\n   'o:owner': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/users/1',\n    'o:id': 1},\n   'o:resource_class': None,\n   'o:resource_template': None,\n   'o:thumbnail': None,\n   'o:title': None,\n   'thumbnail_display_urls': {'large': None, 'medium': None, 'square': None},\n   'o:created': {'@value': '2022-11-15T04:06:06+00:00',\n    '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n   'o:modified': {'@value': '2022-11-15T04:06:06+00:00',\n    '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n   'o:media': [],\n   'o:item_set': [],\n   'o:site': [{'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/1',\n     'o:id': 1},\n    {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/2', 'o:id': 2}],\n   'schema:name': [{'type': 'literal',\n     'property_id': 2922,\n     'property_label': 'name',\n     'is_public': True,\n     '@value': 'My first resource!',\n     '@language': 'ja'}]},\n  {'@context': 'https://omekas.aws.ldas.jp/sandbox/api-context',\n   '@id': 'https://omekas.aws.ldas.jp/sandbox/api/items/8025',\n   '@type': 'o:Item',\n   'o:id': 8025,\n   'o:is_public': True,\n   'o:owner': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/users/1',\n    'o:id': 1},\n   'o:resource_class': None,\n   'o:resource_template': None,\n   'o:thumbnail': None,\n   'o:title': None,\n   'thumbnail_display_urls': {'large': None, 'medium': None, 'square': None},\n   'o:created': {'@value': '2022-11-15T04:07:21+00:00',\n    '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n   'o:modified': {'@value': '2022-11-15T04:07:21+00:00',\n    '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n   'o:media': [],\n   'o:item_set': [],\n   'o:site': [{'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/1',\n     'o:id': 1},\n    {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/2', 'o:id': 2}],\n   'schema:name': [{'type': 'literal',\n     'property_id': 2922,\n     'property_label': 'name',\n     'is_public': True,\n     '@value': 'My first resource!'}]},\n  {'@context': 'https://omekas.aws.ldas.jp/sandbox/api-context',\n   '@id': 'https://omekas.aws.ldas.jp/sandbox/api/items/8026',\n   '@type': 'o:Item',\n   'o:id': 8026,\n   'o:is_public': True,\n   'o:owner': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/users/1',\n    'o:id': 1},\n   'o:resource_class': None,\n   'o:resource_template': None,\n   'o:thumbnail': None,\n   'o:title': None,\n   'thumbnail_display_urls': {'large': None, 'medium': None, 'square': None},\n   'o:created': {'@value': '2022-11-15T04:07:40+00:00',\n    '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n   'o:modified': {'@value': '2022-11-15T04:07:40+00:00',\n    '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n   'o:media': [],\n   'o:item_set': [{'@id': 'https://omekas.aws.ldas.jp/sandbox/api/item_sets/187',\n     'o:id': 187}],\n   'o:site': [{'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/1',\n     'o:id': 1},\n    {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/2', 'o:id': 2}],\n   'schema:name': [{'type': 'literal',\n     'property_id': 2922,\n     'property_label': 'name',\n     'is_public': True,\n     '@value': 'My first resource!'}]},\n  {'@context': 'https://omekas.aws.ldas.jp/sandbox/api-context',\n   '@id': 'https://omekas.aws.ldas.jp/sandbox/api/items/8027',\n   '@type': 'o:Item',\n   'o:id': 8027,\n   'o:is_public': True,\n   'o:owner': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/users/1',\n    'o:id': 1},\n   'o:resource_class': None,\n   'o:resource_template': None,\n   'o:thumbnail': None,\n   'o:title': None,\n   'thumbnail_display_urls': {'large': None, 'medium': None, 'square': None},\n   'o:created': {'@value': '2022-11-15T04:08:56+00:00',\n    '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n   'o:modified': {'@value': '2022-11-15T04:08:56+00:00',\n    '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n   'o:media': [],\n   'o:item_set': [],\n   'o:site': [{'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/1',\n     'o:id': 1},\n    {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/2', 'o:id': 2}],\n   'schema:name': [{'type': 'literal',\n     'property_id': 2922,\n     'property_label': 'name',\n     'is_public': True,\n     '@value': 'My first resource!'}]},\n  {'@context': 'https://omekas.aws.ldas.jp/sandbox/api-context',\n   '@id': 'https://omekas.aws.ldas.jp/sandbox/api/items/8028',\n   '@type': 'o:Item',\n   'o:id': 8028,\n   'o:is_public': True,\n   'o:owner': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/users/1',\n    'o:id': 1},\n   'o:resource_class': None,\n   'o:resource_template': None,\n   'o:thumbnail': None,\n   'o:title': None,\n   'thumbnail_display_urls': {'large': None, 'medium': None, 'square': None},\n   'o:created': {'@value': '2022-11-15T04:08:57+00:00',\n    '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n   'o:modified': {'@value': '2022-11-15T04:08:57+00:00',\n    '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n   'o:media': [],\n   'o:item_set': [{'@id': 'https://omekas.aws.ldas.jp/sandbox/api/item_sets/187',\n     'o:id': 187}],\n   'o:site': [{'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/1',\n     'o:id': 1},\n    {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/2', 'o:id': 2}],\n   'schema:name': [{'type': 'literal',\n     'property_id': 2922,\n     'property_label': 'name',\n     'is_public': True,\n     '@value': 'My first resource!'}]}]}\n\n\n\n# Get a random item from a list of items\ndata = omeka_auth.filter_items_by_property(filter_property='schema:name', filter_type='ex')\nrandom_item = random.choice(data['results'])\n# Original title\ntitle = random_item['schema:name'][0]['@value']\n\n# Copy and update the original item\nnew_item = deepcopy(random_item)\nnew_item['schema:name'][0]['@value'] = title + ' - UPDATED!'\n\n# Update the item \nupdated_item = omeka_auth.update_resource(new_item, 'items')\n\n# Display the updated title\nupdated_title = updated_item['schema:name'][0]['@value']\nprint(updated_title)\n\n# The id of the original and upated items should be the same\nassert random_item['o:id'] == updated_item['o:id']\n\n# But the titles should be different\nassert title != updated_item['schema:name'][0]['@value']\n\nMy first resource! - UPDATED!\n\n\n\nsource\n\n\nOmekaAPIClient.add_media_to_item\n\n OmekaAPIClient.add_media_to_item (item_id, media_file, payload={},\n                                   template_id=None, class_id=None)\n\nUpload a media file and associate it with an existing item.\nParameters:\n* item_id - the Omeka id of the item this media file should be added to\n* media_path - a path to an image/media file (string or pathlib Path)\n* payload (optional) - metadata to attach to media object, either a dict generated by prepare_item_payload() or prepare_item_payload_using_template(), or a string which is used as the value for dcterms:title.\n* template_id - internal Omeka identifier of a resource template you want to attach to this item\n* class_id - internal Omeka identifier of a resource class you want to attach to this item\nReturns: * a dict providing a JSON-LD representation of the new media object\n\nomeka_auth = OmekaAPIClient(\n    api_url=os.getenv('API_URL'), \n    key_identity=os.getenv('KEY_IDENTITY'), \n    key_credential=os.getenv('KEY_CREDENTIAL'),\n    use_cache=False\n)\n\nAdd a media file to an item without any additional metadata.\n\n# Get a random item from a list of items\ndata = omeka_auth.get_resources('items')\nitem = random.choice(data['results'])\nitem_id = item['o:id']\n\n# Add a new media file to the item\nmedia_resource = omeka_auth.add_media_to_item(item_id, 'media/nla.news-article226799674-24144902.jpg')\n\n# Check that the media resource is the expected type\nassert media_resource['@type'] == 'o:Media'\n\n# Check that the media resource is linked to the item\nassert media_resource['o:item']['o:id'] == item_id\n\nInclude a title for a new media item by supplying a string value to the payload parameter.\n\n# Add a new media file with a title to the item\nmedia_resource = omeka_auth.add_media_to_item(item_id, 'media/nla.news-article226799674-24144902.jpg', payload='This has a title')\n\n# The title should be saved as dcterms:title\nassert media_resource['dcterms:title'][0]['@value'] == 'This has a title'\n\nInclude more detailed metadata with a new media item by generating a payload and supplying it using the payload parameter.\n\n# Define some metadata\nmedia_metadata = {\n    'schema:name': ['This is a different title'],\n    'schema:identifier': ['myidis3']\n}\n\n# Convert metadata into an Omeka payload\nmedia_payload = omeka_auth.prepare_item_payload(media_metadata)\n\n# Add a new media file with a metadata payload to the item\nmedia_resource = omeka_auth.add_media_to_item(item_id, 'media/nla.news-article226799674-24144902.jpg', payload=media_payload)\n\nassert media_resource['schema:name'][0]['@value'] == 'This is a different title'\n\nUse a specific resource template with the new media item by using the template_id parameter.\n\n# Get a random template from a list of available templates for testing\ndata = omeka_auth.get_resources('resource_templates')\ntemplate = random.choice(data['results'])\ntemplate_id = template['o:id']\n\n# Add a new media file and assign it to a template using the `template_id` parameter\nmedia_resource = omeka_auth.add_media_to_item(item_id, 'media/nla.news-article226799674-24144902.jpg', payload=media_payload, template_id=template_id)\n\n# Check the new media object has the correct template id\nassert media_resource['o:resource_template']['o:id'] == template_id\n\n\nsource\n\n\nOmekaAPIClient.add_iiif_to_item\n\n OmekaAPIClient.add_iiif_to_item (item_id, iiif_url, payload={},\n                                  template_id=None, class_id=None)\n\nUpload a media file and associate it with an existing item.\nParameters:\n* item_id - the Omeka id of the item this media file should be added to\n* iiif_url - a url to a iiif image (string)\n* payload (optional) - metadata to attach to media object, either\na dict generated by prepare_item_payload() or prepare_item_payload_using_template(), or a string which is used as the value for dcterms:title.\n* template_id - internal Omeka identifier of a resource template you want to attach to this item\n* class_id - internal Omeka identifier of a resource class you want to attach to this item\nReturns: * a dict providing a JSON-LD representation of the new media object\n\nomeka_auth = OmekaAPIClient(\n    api_url=os.getenv('API_URL'), \n    key_identity=os.getenv('KEY_IDENTITY'), \n    key_credential=os.getenv('KEY_CREDENTIAL'),\n    use_cache=False\n)\n\n\n# Get a random item from a list of items\ndata = omeka_auth.get_resources('items')\nitem = random.choice(data['results'])\nitem_id = item['o:id']\n\n# Add a new iiif url with a title to the item\nmedia_resource = omeka_auth.add_iiif_to_item(item_id, 'https://www.dl.ndl.go.jp/api/iiif/3437686/R0000001/info.json', payload='This has a title')\n\n# Check that the media resource is the expected type\nassert media_resource['@type'] == 'o:Media'\n\n# Check that the media resource is linked to the item\nassert media_resource['o:item']['o:id'] == item_id\n\n# The title should be saved as dcterms:title\nassert media_resource['dcterms:title'][0]['@value'] == 'This has a title'\n\n\nsource\n\n\nOmekaAPIClient.add_marker_to_item\n\n OmekaAPIClient.add_marker_to_item (item_id, coords=None, terms=None,\n                                    label=None, media_id=None)\n\nAdd a map marker to an item. Requires the mapping module to be installed.\nParameters:\n* item_id - identifier of item to add marker to\n* coords - list with coordinates in longitude, latitude order eg [151.209900, -33.865143]\n* terms - list with vocab terms containing longitude and latitude values eg [‘schema:longitude’, ‘schema:latitude’]\n* label - label for marker (defaults to item title)\n* media_id - identifier of media resource to display with marker\nReturns:\n* dict providing JSON-LD representation of marker\nThe Omeka Mapping module lets you associate an item with a location on a map. Once you have the module installed, you can use the Omeka API to add map markers to items.\n\n# Get a random item from a list of items\ndata = omeka_auth.get_resources('items')\nitem = random.choice(data['results'])\nitem_id = item['o:id']\n\n# Add a marker using coords\nmarker = omeka_auth.add_marker_to_item(item_id, coords=[151.209900, -33.865143])\n\nassert marker['@type'] == 'o-module-mapping:Marker'\nassert marker['o:item']['o:id'] == item_id\n\nYou can also read the map coordinates from the item itself. By default OmekaAPIClient.add_marker_to_item will look for values in schema:longitude and schema:latitude, but you can specify the vocabulary terms that you want to look for.\nHere we’ll create a simple item with values for schema:longitude and schema:latitude.\n\ntest_place = {\n    'schema:name': [\n        {\n            'value': 'Australia'\n        }\n    ],\n    'schema:longitude': [\n        {\n            'value': '151.209900'\n        }\n    ],\n    'schema:latitude': [\n        {\n            'value': '-33.865143'\n        }\n    ],\n    \n}\n\npayload = omeka_auth.prepare_item_payload(test_place)\nnew_place = omeka_auth.add_item(payload)\n\nNow we can just call OmekaAPIClient.add_marker_to_item without any coordinates, and it will get them from schema:longitude and schema:latitude.\n\nnew_marker = omeka_auth.add_marker_to_item(new_place['o:id'])\n\nassert new_marker['@type'] == 'o-module-mapping:Marker'\nassert new_marker['o:item']['o:id'] == new_place['o:id']\nassert new_marker['o-module-mapping:lat'] == -33.865143"
  },
  {
    "objectID": "api.html#managing-templates",
    "href": "api.html#managing-templates",
    "title": "Omeka S API client",
    "section": "Managing templates",
    "text": "Managing templates\nResource templates can be exported from one Omeka instance and imported into another. This is a really useful way of sharing and resuing data structures. However, exported templates can’t be uploaded via the API without some modification, as they don’t include Omeka numeric identifiers for referenced classes and properties. Before uploading them, we need to find the referenced classes and properties in the local Omeka instance, and insert the local identifiers into the payload.\nSimilarly, if custom vocabs are referenced in the exported template, they will need to be updated to include the vocab’s identifier in the new Omeka instance. Of course, you’ll need to make sure it’s installed first.\nIn general, you want to make sure that the any vocabs and data types referenced by the exported templates will be available in the new Omeka instance. So before you upload any templates you should check that:\n\nreferenced vocabularies are already installed\nmodules used in defining data types are installed ( eg the Numeric Data Types module provides additional data types such as Timestamp for dates\nany custom vocabularies (created using the Custom Vocab are installed, along with the module itself of course\nthe Value Suggest module is installed if the template includes references to the controlled vocabs it provides\n\n\nsource\n\nOmekaAPIClient.prepare_template_payload\n\n OmekaAPIClient.prepare_template_payload (template_file)\n\nInsert local property, class, and vocab identifiers into a resource template exported from Omeka so that it can be uploaded to the local instance.\nParameters:\n* template_file - path to a template exported from Omeka (str or pathlib Path)\nReturns:\n* template payload with local identifiers inserted\n\nomeka_auth = OmekaAPIClient(\n    api_url=os.getenv('API_URL'), \n    key_identity=os.getenv('KEY_IDENTITY'), \n    key_credential=os.getenv('KEY_CREDENTIAL'),\n    use_cache=False\n)\n\n\ntemplate_payload = omeka_auth.prepare_template_payload('templates/Person.json')\n\n# Check the label\nassert template_payload['o:label'] == 'Person'\n\n# Check that there is a list of properties\nassert len(template_payload['o:resource_template_property']) > 0\n\n\nsource\n\n\nOmekaAPIClient.upload_template\n\n OmekaAPIClient.upload_template (template_payload)\n\nUpload a template exported from an instance of Omeka to the current local instance.\nParameters:\n* template_payload - dict payload generated by prepare_template_payload\nReturn:\n* dict containing a JSON-LD representation of the uploaded template\n\n# First we'll check to see if there's already a template with the label 'Person'\nexisting_template = omeka_auth.get_template_by_label('Person')\n\n# If there is we'll delete it\n# Trying to upload a template with the same label as an existing template will generate an error\nif existing_template:\n    deleted = omeka_auth.delete_resource(existing_template['o:id'], 'resource_templates')\n\n# Now we can add the new template\ntemplate_payload = omeka_auth.prepare_template_payload('templates/Person.json')\nnew_template = omeka_auth.upload_template(template_payload)\n\n# Result should be a 'ResourceTemplate\nassert new_template['@type'] == 'o:ResourceTemplate'\n\n# Label should be 'Person'\nassert new_template['o:label'] == 'Person'\n\n# It should have properties\nassert len(new_template['o:resource_template_property']) > 0\n\n<Response [200]>\n\n\n\nsource\n\n\nOmekaAPIClient.localise_custom_vocabs\n\n OmekaAPIClient.localise_custom_vocabs (data_types)\n\nCheck a list of data types for references to custom vocabs. If found, look for the local identifier of the custom vocab, and insert it into the data type information.\nRequires the customvocab module to be installed.\nParameters:\n* data_types - a list of data types from an exported template property\nReturns:\n* list of datatypes with local identifiers\n\n# Data type example with ridiculously high customvocab id value\ndata_types = [{'name': 'customvocab:200000', 'label': \"Date qualifiers\"}]\n\n# Localise!\nlocalised_data_types = omeka_auth.localise_custom_vocabs(data_types)\nprint(localised_data_types)\n\nif len(localised_data_types) > 0:\n\n    # Localised data type should start with 'customvocab'\n    assert localised_data_types[0].startswith('customvocab:')\n\n    # The localised customvocab id should not be the same as the supplied one\n    assert localised_data_types[0] != data_types[0]['name']\n\n['customvocab:1']\n\n\n\nsource\n\n\nOmekaAPIClient.get_template_class_id\n\n OmekaAPIClient.get_template_class_id (template)\n\nGet the local id of the resource class associated with the supplied template.\nParameters:\n* template - dict from exported template\nReturns:\n* class identifier\n\n# Load template from filesystem\ntemplate = json.loads(Path('templates/Person.json').read_bytes())\n\nperson_class_id = omeka_auth.get_resource_by_term('schema:Person', 'resource_classes')['o:id']\n\n# Get resource id\nclass_id = omeka_auth.get_template_class_id(template)\n\nassert class_id == person_class_id\n\n\nsource\n\n\nOmekaAPIClient.get_template_property_id\n\n OmekaAPIClient.get_template_property_id (template, term)\n\nGet the local id of the property associated with the supplied template.\nParameters:\n* template - dict from exported template\n* term - property term (eg ‘o:title_property’)\nReturns:\n* property identifier\n\n# Load template from filesystem\ntemplate = json.loads(Path('templates/Person.json').read_bytes())\n\n# get the id of the schema:name property\nname_prop_id = omeka_auth.get_resource_by_term('schema:name', 'properties')['o:id']\n\n# Get id of template property used for title\nprop_id = omeka_auth.get_template_property_id(template, 'o:title_property')\n\n# The ids should be the same\nassert prop_id == name_prop_id"
  },
  {
    "objectID": "api.html#adding-item-sets",
    "href": "api.html#adding-item-sets",
    "title": "Omeka S API client",
    "section": "Adding item sets",
    "text": "Adding item sets\nTo add resources to Omeka you need authenticate your API requests by supplying key_identity and key_credential tokens as parameters.\n\nomeka_auth = OmekaAPIClient(\n    # api_url='https://timsherratt.org/collections/api',\n    api_url=os.getenv('API_URL'),\n    key_identity=os.getenv('KEY_IDENTITY'), \n    key_credential=os.getenv('KEY_CREDENTIAL'),\n    use_cache=False\n)\n\nThere are two stages in creating a new item set:\n\nprepare a payload containing the item set data in the format expected by Omeka\nupload the payload to Omeka\n\n\nPrepare an item set payload\n\nsource\n\n\nOmekaAPIClient.prepare_item_payload\n\n OmekaAPIClient.prepare_item_payload (terms)\n\nPrepare an item payload, ready for upload.\nParameters:\n* terms: a dict of terms, values, and (optionally) data types\nReturns:\n* the payload dict\n\ntest_item_set = {\n    'dcterms:title': [\n        {\n            'value': 'My first item set!'\n        }\n    ]\n}\n\n\npayload = omeka_auth.prepare_item_payload(test_item_set)\npayload\n\n{'dcterms:title': [{'property_id': 1,\n   'type': 'literal',\n   '@value': 'My first item set!'}]}\n\n\n\n\nUpload the payload to Omeka and create a new item set\n\nsource\n\n\nOmekaAPIClient.add_item_set\n\n OmekaAPIClient.add_item_set (payload, template_id=None, class_id=None)\n\nCreate a new item from the supplied payload, optionally uploading attached media files.\nParameters:\n* payload - a dict generated by prepare_item_payload() or prepare_item_payload_using_template()\n* template_id - internal Omeka identifier of a resource template you want to attach to this item\n* class_id - internal Omeka identifier of a resource class you want to attach to this item\nReturns:\n* a dict providing the JSON-LD representation of the new item from Omeka\n\n\nAdd a simple item set\n\nnew_item_set = omeka_auth.add_item_set(payload)\nnew_item_set\n\n{'@context': 'https://omekas.aws.ldas.jp/sandbox/api-context',\n '@id': 'https://omekas.aws.ldas.jp/sandbox/api/item_sets/8035',\n '@type': 'o:ItemSet',\n 'o:id': 8035,\n 'o:is_public': True,\n 'o:owner': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/users/1',\n  'o:id': 1},\n 'o:resource_class': None,\n 'o:resource_template': None,\n 'o:thumbnail': None,\n 'o:title': 'My first item set!',\n 'thumbnail_display_urls': {'large': None, 'medium': None, 'square': None},\n 'o:created': {'@value': '2022-11-15T04:09:57+00:00',\n  '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n 'o:modified': {'@value': '2022-11-15T04:09:57+00:00',\n  '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n 'o:is_open': False,\n 'o:items': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/items?item_set_id=8035'},\n 'dcterms:title': [{'type': 'literal',\n   'property_id': 1,\n   'property_label': 'Title',\n   'is_public': True,\n   '@value': 'My first item set!'}]}"
  },
  {
    "objectID": "api.html#utilities",
    "href": "api.html#utilities",
    "title": "Omeka S API client",
    "section": "Utilities",
    "text": "Utilities\n\nsource\n\nOmekaAPIClient.format_resource_id\n\n OmekaAPIClient.format_resource_id (resource_id, resource_type)\n\nGenerate a formatted id for the resource with the specified Omeka id number and resource type.\nParameters:\n* resource_id - numeric identifier used by Omeka for this resource\n* resource_type - one of Omeka’s resource types, eg: ‘items’, ‘properties’\nReturns: * a dict with values for ‘@id’ and ‘o:id’\n\nid_url = omeka.format_resource_id(5, 'resource_templates')\n\napi_url = os.getenv('API_URL')\n\nassert id_url == {\n    '@id': f'{api_url}/resource_templates/5',\n    'o:id': 5\n}\n\n\nsource\n\n\nOmekaAPIClient.prepare_property_value\n\n OmekaAPIClient.prepare_property_value (value, property_id)\n\nFormats a property value according to its datatype as expected by Omeka.\nThe formatted value can be used in a payload to create a new item.\nParameters:\n* value - a dict containing a value and (optionally) a type and lang\n* property_id - the numeric identifier of the property\nNote that is no type is supplied, ‘literal’ will be used by default.\nReturns: * a dict with values for property_id, type, and either @id or @value.\n\nprop_id = omeka_auth.get_property_id('schema:url')\nprop_value = {'value': 'https://glam-workbench.net', 'type': 'uri'}\n\nformatted_prop = omeka_auth.prepare_property_value(prop_value, prop_id)\nformatted_prop\n\n{'property_id': 2995, 'type': 'uri', '@id': 'https://glam-workbench.net'}\n\n\n\nassert prop_id == formatted_prop['property_id']\nassert 'type' in formatted_prop\nassert formatted_prop['@id'] == 'https://glam-workbench.net'\n\n\nsource\n\n\nOmekaAPIClient.get_template_properties\n\n OmekaAPIClient.get_template_properties (template_id)\n\nList properties used by the specified template.\nThe resource template objects returned by the API don’t include property terms.\nThis function gets the additional details, and organises the properties in a dictionary, organised by term. This makes it easy to check if a particular term is used by a template.\nParameters:\n* template_id - numeric identifier for a template\nReturns:\n* a dict organised by property terms, with values for property_id and type\n\ntemplate_id = omeka_auth.get_template_by_label('Newspaper')['o:id']\nnewspaper_properties = omeka_auth.get_template_properties(template_id)\n\nassert 'schema:name' in newspaper_properties"
  },
  {
    "objectID": "api.html#example-adding-a-newspaper-article-from-trove",
    "href": "api.html#example-adding-a-newspaper-article-from-trove",
    "title": "Omeka S API client",
    "section": "Example: adding a newspaper article from Trove",
    "text": "Example: adding a newspaper article from Trove\nIn the example below I’m going to manually step through the process of adding a new item to Omeka using the API in order to demonstrate the methods available. But of course the point of using the API is to automate such processes – joining together the individual steps so they can be embedded into your own systems or workflows. For a more detailed example that uploads Trove newspaper articles from a variety of sources, including Trove searches, Trove lists, and Zotero libraries, see the GLAM Workbench.\nLet’s suppose we want to add this newspaper article in Trove to our Omeka instance. To take best advantage of Omeka’s linked data infrastructure, we’ll actually create two resources – one for the article, and one for the newspaper it was published in.\nI’ve already created templates labelled ‘Newspaper’ and ‘Newspaper article’.\nLet’s start with the newspaper. First we need to find out the numeric identifier Omeka is using for the Newspaper template. We can use OmekaAPIClient.get_template_by_label to find out.\n\nomeka_auth = OmekaAPIClient(\n    api_url=os.getenv('API_URL'), \n    key_identity=os.getenv('KEY_IDENTITY'), \n    key_credential=os.getenv('KEY_CREDENTIAL'),\n    use_cache=False\n)\n\nnewspaper_template_id = omeka_auth.get_template_by_label('Newspaper')['o:id']\nnewspaper_template_id\n\n2\n\n\nFor convenience, we can get a summary of the properties used in the Newspaper template using OmekaAPIClient.get_template_properties. This is useful if we want to check which properties are in use, and what data types are expected.\n\nomeka_auth.get_template_properties(newspaper_template_id)\n\n{'dcterms:title': {'property_id': 1,\n  'type': ['literal', 'uri', 'resource:item']},\n 'dcterms:description': {'property_id': 4,\n  'type': ['literal', 'uri', 'resource:item']},\n 'schema:name': {'property_id': 2922,\n  'type': ['literal', 'uri', 'resource:item']}}\n\n\nThe first step in preparing our data for upload is to create a dictionary, using the required property terms as keys. In this case, we’ll assign data about the newspaper to schema.name and schema.url.\n\nnewspaper = {\n    'schema.name': [\n        {\n            'type': 'literal',\n            'value': 'The Bendigo Independent (Vic. : 1891 - 1918)'\n        }\n    ],\n    'schema:url': [\n        {\n            'type': 'literal',\n            'value': 'http://nla.gov.au/nla.news-title806'\n        }\n    ]\n}\n\nNow we can use this data to create a payload for upload to Omeka. OmekaAPIClient.prepare_item_payload_using_template will check our data against the Newspaper template and build the payload.\n\npayload = omeka_auth.prepare_item_payload_using_template(newspaper, newspaper_template_id)\n\nTerm schema.name not in template\nTerm schema:url not in template\n\n\nWhoops! It seems we have some problems with our data file! First of all we’ve used a full stop, rather than a colon in schema:name. Second, we’ve said the data type of schema:url is ‘literal’, but if we check the template properties we’ll see it’ should be ‘uri’. Let’s make these changes.\n\nnewspaper = {\n    'schema:name': [\n        {\n            'type': 'literal',\n            'value': 'The Bendigo Independent (Vic. : 1891 - 1918)'\n        }\n    ],\n    'schema:url': [\n        {\n            'type': 'uri',\n            'value': 'http://nla.gov.au/nla.news-title806'\n        }\n    ]\n}\n\n\npayload = omeka_auth.prepare_item_payload_using_template(newspaper, newspaper_template_id)\n\nTerm schema:url not in template\n\n\nThat seems better! Now we can examine the payload.\n\npayload\n\n{'schema:name': [{'property_id': 2922,\n   'type': 'literal',\n   '@value': 'The Bendigo Independent (Vic. : 1891 - 1918)'}]}\n\n\nNotice how the values have been reformatted? They should now be ready to upload to Omeka using OmekaAPIClient.add_item. We’ll supply both the payload and the newspaper template id.\n\nnewspaper_item = omeka_auth.add_item(payload, template_id=newspaper_template_id)\n\nWe can check the contents of newspaper_item to make sure it’s been added succesfully.\n\nnewspaper_item\n\n{'@context': 'https://omekas.aws.ldas.jp/sandbox/api-context',\n '@id': 'https://omekas.aws.ldas.jp/sandbox/api/items/8036',\n '@type': ['o:Item', 'dctype:Image'],\n 'o:id': 8036,\n 'o:is_public': True,\n 'o:owner': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/users/1',\n  'o:id': 1},\n 'o:resource_class': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/resource_classes/26',\n  'o:id': 26},\n 'o:resource_template': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/resource_templates/2',\n  'o:id': 2},\n 'o:thumbnail': None,\n 'o:title': None,\n 'thumbnail_display_urls': {'large': None, 'medium': None, 'square': None},\n 'o:created': {'@value': '2022-11-15T04:10:04+00:00',\n  '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n 'o:modified': {'@value': '2022-11-15T04:10:04+00:00',\n  '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n 'o:media': [],\n 'o:item_set': [],\n 'o:site': [{'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/1',\n   'o:id': 1},\n  {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/2', 'o:id': 2}],\n 'schema:name': [{'type': 'literal',\n   'property_id': 2922,\n   'property_label': 'name',\n   'is_public': True,\n   '@value': 'The Bendigo Independent (Vic. : 1891 - 1918)'}]}\n\n\nGreat! Now what about the article? Again let’s start by having a look at the ‘Newspaper article’ template.\n\narticle_template_id = omeka_auth.get_template_by_label('Newspaper article')['o:id']\nomeka_auth.get_template_properties(article_template_id)\n\n{'dcterms:title': {'property_id': 1,\n  'type': ['literal', 'uri', 'resource:item']},\n 'dcterms:description': {'property_id': 4,\n  'type': ['literal', 'uri', 'resource:item']},\n 'schema:name': {'property_id': 2922,\n  'type': ['literal', 'uri', 'resource:item']},\n 'schema:isPartOf': {'property_id': 2271,\n  'type': ['literal', 'uri', 'resource:item']},\n 'schema:datePublished': {'property_id': 2027,\n  'type': ['literal', 'uri', 'resource:item']},\n 'schema:url': {'property_id': 2995,\n  'type': ['literal', 'uri', 'resource:item']}}\n\n\nThis time we’ll build our data file in stages.\n\n# Create an empty dictionary\narticle = {}\n\n# Add value for schema:name\narticle['schema:name'] = [\"MR nakamura196'S PREDICTION. RENEWAL OF CYCLONE FORETOLD.\"]\n\nYou’ll notice that this time I’ve only included the value of the property, not the data type. This is because OmekaAPIClient.prepare_item_payload_using_template will insert default data types if they’re not specified. The basic rules it uses if you don’t supply a data type are:\n\nif the template defines a default data type, use that\nif ‘literal’ is in the template’s list of expected data types, use that\nif ‘literal’ is not in the template’s list of expected data types print a warning asking the user to specify a data type and drop the property from the payload\n\nIn the case above, the ‘literal’ data type will be assigned to the schema:name value.\nTo create a link between the article and the newspaper it was published in, we can use schema.isPartOf. If we look in the list of template properties we see that this property expects a data type of ‘resource:item’.\n'schema:isPartOf': {'property_id': 736, 'type': ['resource:item']}\nThe ‘resource:item’ data type means that the value will be an identifier pointing to another Omeka item. So we include the identifier of the newly-created newspaper record. Once again, the data type will be automatically added when we generate the payload.\n\narticle['schema:isPartOf'] = [newspaper_item['o:id']]\n\nNext we’ll add the publication date. To recognise dates as specific data types, you need to install the Numeric Data Types module. Once that’s done, you can set the ‘numeric:timestamp’ data type as the default for any date fields in your template. In the list of properties from the newspaper article template, you can see:\n'schema:datePublished': {'property_id': 928, 'type': ['numeric:timestamp']}\nThe date value itself is supplied in a standard ISO format – ‘YYYY-MM-DD’.\n\narticle['schema:datePublished'] = ['1918-03-14']\n\nFinally we’ll add a link to the article. Once again the template includes a default data type.\n'schema:url': {'property_id': 393, 'type': ['uri']}\nSo we can just include the value.\n\narticle['schema:url'] = ['http://nla.gov.au/nla.news-article226799674']\n\nNow that we’ve assembled the article metadata, we can generate a payload.\n\narticle_payload = omeka_auth.prepare_item_payload_using_template(article, article_template_id)\n\nAs you can see below, the default data types have been inserted into the payload, and some additional fields have been added to define the link to the newspaper item.\n\narticle_payload\n\n{'schema:name': [{'property_id': 2922,\n   'type': 'literal',\n   '@value': \"MR nakamura196'S PREDICTION. RENEWAL OF CYCLONE FORETOLD.\"}],\n 'schema:isPartOf': [{'property_id': 2271, 'type': 'literal', '@value': 8036}],\n 'schema:datePublished': [{'property_id': 2027,\n   'type': 'literal',\n   '@value': '1918-03-14'}],\n 'schema:url': [{'property_id': 2995,\n   'type': 'literal',\n   '@value': 'http://nla.gov.au/nla.news-article226799674'}]}\n\n\nWe could now go ahead and upload the payload to Omeka, but what if we want to include media files? In this case I have a JPG image of the article I want to attach. All you need to do is supply a list of paths pointing to media files using the media_files parameter. The list can just include the paths as strings, in which case the file name will be used as the media object’s title. Alternatively, you can supply a list of dicts, each containing a path and title value.\n\n# Create a list of paths pointing to media files\n# The paths can be strings or pathlib Paths\nmedia_files = ['media/nla.news-article226799674-24144902.jpg']\n\n# Include the media files when we upload the payload\narticle_item = omeka_auth.add_item(article_payload, media_files=media_files, template_id=article_template_id)\n\nWhen we look at the uploaded item, we’ll see that the media files have been processed and added to the record.\n\narticle_item\n\n{'@context': 'https://omekas.aws.ldas.jp/sandbox/api-context',\n '@id': 'https://omekas.aws.ldas.jp/sandbox/api/items/8037',\n '@type': ['o:Item', 'dctype:Image'],\n 'o:id': 8037,\n 'o:is_public': True,\n 'o:owner': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/users/1',\n  'o:id': 1},\n 'o:resource_class': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/resource_classes/26',\n  'o:id': 26},\n 'o:resource_template': {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/resource_templates/4',\n  'o:id': 4},\n 'o:thumbnail': None,\n 'o:title': None,\n 'thumbnail_display_urls': {'large': 'https://omekas.aws.ldas.jp/sandbox/files/large/a4ea085cb0ad5ff1000f1e33092eeb15e4fbf107.jpg',\n  'medium': 'https://omekas.aws.ldas.jp/sandbox/files/medium/a4ea085cb0ad5ff1000f1e33092eeb15e4fbf107.jpg',\n  'square': 'https://omekas.aws.ldas.jp/sandbox/files/square/a4ea085cb0ad5ff1000f1e33092eeb15e4fbf107.jpg'},\n 'o:created': {'@value': '2022-11-15T04:10:10+00:00',\n  '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n 'o:modified': {'@value': '2022-11-15T04:10:10+00:00',\n  '@type': 'http://www.w3.org/2001/XMLSchema#dateTime'},\n 'o:media': [{'@id': 'https://omekas.aws.ldas.jp/sandbox/api/media/8038',\n   'o:id': 8038}],\n 'o:item_set': [],\n 'o:site': [{'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/1',\n   'o:id': 1},\n  {'@id': 'https://omekas.aws.ldas.jp/sandbox/api/sites/2', 'o:id': 2}],\n 'schema:name': [{'type': 'literal',\n   'property_id': 2922,\n   'property_label': 'name',\n   'is_public': True,\n   '@value': \"MR nakamura196'S PREDICTION. RENEWAL OF CYCLONE FORETOLD.\"}],\n 'schema:datePublished': [{'type': 'literal',\n   'property_id': 2027,\n   'property_label': 'datePublished',\n   'is_public': True,\n   '@value': '1918-03-14'}],\n 'schema:url': [{'type': 'literal',\n   'property_id': 2995,\n   'property_label': 'url',\n   'is_public': True,\n   '@value': 'http://nla.gov.au/nla.news-article226799674'}]}"
  }
]